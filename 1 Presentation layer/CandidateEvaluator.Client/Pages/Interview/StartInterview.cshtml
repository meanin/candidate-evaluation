@page "/interview/{id:guid}/start"
@using CandidateEvaluator.Common.Dtos
@using CandidateEvaluator.Common.Requests.InterviewResult
@using CandidateEvaluator.Common.Requests.Question
@using Microsoft.AspNetCore.Blazor.Services
@inject Services.UserIdentityService Http
@inject IUriHelper UriHelper

@if (_interview == null)
{
    <div class="fa-3x">
        <i class="fas fa-spinner fa-pulse"></i>
    </div>
}
else
{
    <div>
        <label>@_interview.Name</label>
        <text>@_request.InterviewDate</text>
        <textarea class="form-control" rows="1" maxlength="30" bind=@_request.CandidateName placeholder="Enter candidate name" />
    </div>

    <div id="content">

        @foreach (var content in _interview.Content)
        {
            var id = _interview.Content.IndexOf(content);
            <div class="card">
                <div class="card-header">
                    <h4 class="mb-0">
                        <button class="btn btn-link@(id!=0?" collapsed":"")" data-toggle="collapse" data-target="#category-@id">
                            @content.Category.Name
                        </button>
                    </h4>
                </div>

                <div id="category-@id" class="collapse@(id==0?" show":"")" data-parent="#content">
                    <div class="card-body">
                        @foreach (var question in content.Questions)
                        {
                            var questionResult = _request.Content.Single(c => c.CategoryId == content.Category.Id)
                                ?.QuestionResults.Single(q => q.QuestionId == question.Id);
                            var questionResultId = _request.Content.Single(c => c.CategoryId == content.Category.Id).QuestionResults.IndexOf(questionResult);
                            <label>@question.Name</label>
                            <br />
                            if (question.Type == CreateQuestionRequest.QuestionType.Regular)
                             {
                                 <pre>@question.Text</pre>
                            }
                            else
                            {
                                <div class="card" style="color:black; @(_fullScreenStyle[$"{id}/{questionResultId}"])">
                                    <div class="card-header">
                                        <div class="oi oi-resize-both" onclick="@(c => ToggleFullscreen(id, questionResultId))"></div>
                                    </div>
                                    <div class="card-body">
                                        <pre>@question.Text</pre>
                                    </div>
                                </div>
                            }
                            <input class="form-control" type="number" min="0" max="1" step="0.25" bind=@questionResult.Score placeholder="0.0" />
                            <textarea class="form-control" rows="2" bind=@questionResult.Notes placeholder="Enter notes" />
                        }
                    </div>
                </div>
            </div>
        }

    </div>
    <button class="btn btn-info" onclick="@Save">Save interview result</button>
}
@functions
{
    [Parameter]
    private Guid Id { get; set; }

    private InterviewDto _interview;
    private CreateInterviewResultRequest _request;
    private readonly Dictionary<string, string> _fullScreenStyle = new Dictionary<string, string>();
    private const string CardFullscreen = "display: block; z-index: 9999; position: fixed; width: 100%; height: 100%; top: 0; right: 0; left: 0; bottom: 0; overflow: auto; background-color: white;";

    protected override async Task OnInitAsync()
    {
        try
        {
            _interview = await Http.AuthorizedGetJsonAsync<InterviewDto>($"api/interview/{Id}");
            _request = new CreateInterviewResultRequest
            {
                InterviewDate = DateTime.Now,
                InterviewTemplateName = _interview.Name,
                Content = _interview.Content.Select(c => new CreateCategoryResult
                {
                    CategoryId = c.Category.Id,
                    CategoryName = c.Category.Name,
                    QuestionResults = c.Questions.Select(q => new CreateQuestionResult
                    {
                        QuestionId = q.Id,
                        QuestionName = q.Name
                    }).ToList()
                }).ToList()
            };

            foreach (var category in _interview.Content)
            {
                foreach (var question in category.Questions)
                {
                    if (question.Type == CreateQuestionRequest.QuestionType.Snippet)
                    {
                        _fullScreenStyle[$"{_interview.Content.IndexOf(category)}/{category.Questions.IndexOf(question)}"] = string.Empty;
                    }
                }
            }
        }
        catch
        {
            UriHelper.NavigateTo("/");
        }
    }

    private async Task Save()
    {
        try
        {
            await Http.AuthorizedPostAsync("api/interviewresult", _request);
            UriHelper.NavigateTo("/dashboard");
        }
        catch
        {
            UriHelper.NavigateTo("/");
        }
    }

    private void ToggleFullscreen(int id, int questionResultId)
    {
        _fullScreenStyle[$"{id}/{questionResultId}"] = 
            string.IsNullOrWhiteSpace(_fullScreenStyle[$"{id}/{questionResultId}"])
            ? CardFullscreen
            : string.Empty;
    }

}
