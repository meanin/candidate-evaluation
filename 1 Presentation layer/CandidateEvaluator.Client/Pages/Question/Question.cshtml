@page "/question/{id:guid}"
@using CandidateEvaluator.Common.Requests.Question
@using Microsoft.AspNetCore.Blazor.Services
@inject Services.UserIdentityService Http
@inject IUriHelper UriHelper

@if (_dto == null)
{
    <p><em>Loading...</em></p>

}
else
{
    <a href="/question" class="btn">Go back</a>
    <div class="form-group">
        <label>Name</label>
        <input class="form-control" type="text" bind=@_dto.Name placeholder="Enter question name..." />
    </div>
    <div>
        <textarea class="form-control" rows="4" bind=@_dto.Text placeholder="Enter question" />
    </div>
    <QuestionTypeDropdown TypeChanged="@SetType" />
    <div class="row">
        <button class="col-md-3 btn btn-block btn-success m-1" onclick="@Save">Save</button>
        <button class="col-md-3 btn btn-block btn-danger m-1" onclick="@Delete">Delete</button>
    </div>
}

@functions
{
    [Parameter]
    private Guid Id { get; set; }

    private Common.Dtos.QuestionDto _dto;

    protected override async Task OnInitAsync()
    {
        try
        {
            _dto = await Http.AuthorizedGetJsonAsync<Common.Dtos.QuestionDto>($"api/question/{Id}");
        }
        catch
        {
            UriHelper.NavigateTo("/");
        }
    }

    private void SetType(CreateQuestionRequest.QuestionType type)
    {
        _dto.Type = type;
        StateHasChanged();
    }

    private async Task Save()
    {
        try
        {
            await Http.AuthorizedPostJsonAsync<Guid>($"api/question/{_dto.Id}", _dto);
            UriHelper.NavigateTo($"/question/{Id}");
        }
        catch
        {
            UriHelper.NavigateTo("/");
        }
    }

    private async Task Delete()
    {
        try
        {
            await Http.AuthorizedDeleteAsync($"api/question/{_dto.Id}");
            UriHelper.NavigateTo("/question");
        }
        catch
        {
            UriHelper.NavigateTo("/");
        }
    }
}