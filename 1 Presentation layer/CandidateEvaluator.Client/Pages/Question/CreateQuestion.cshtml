@page "/category/{categoryId:guid}/question/new"
@using Microsoft.AspNetCore.Blazor.Services
@inject Services.UserIdentityService Http
@inject IUriHelper UriHelper

@if (_categoryModels == null)
{
    <p><em>Loading...</em></p>

}
else
{
    <a href="/category/@_questionModel.CategoryId/questions" class="btn">Go back</a>
    <div class="form-group">
        <label>Category</label>
        <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown">
                @if (_selectedCategory == null)
                {
                    <span>Select category</span>
                }
                else
                {
                    <span>@_selectedCategory.Name</span>

                }
            </button>
            <div class="dropdown-menu">
                @foreach (var category in _categoryModels)
                {
                    <button class="dropdown-item" onclick="@(c => SetSelectedCategory(category))">@category.Name</button>
                }
            </div>
        </div>
    </div>
    <div class="form-group">
        <label>Name</label>
        <input class="form-control" type="text" bind=@_questionModel.Name placeholder="Enter question name..." />
    </div>
    <div>
        <textarea class="form-control" rows="4" bind=@_questionModel.Text placeholder="Enter question" />
    </div>
    <div>
        <button class="btn btn-blue" onclick="@Add">Add</button>
    </div>

}

@functions
{
    [Parameter]
    Guid CategoryId { get; set; }

    private List<Contract.Models.Category> _categoryModels;
    private Contract.Models.Category _selectedCategory;
    private Contract.Models.Question _questionModel = new Contract.Models.Question();

    protected override async Task OnInitAsync()
    {
        try
        {
            _categoryModels = await Http.AuthorizedGetJsonAsync<List<Contract.Models.Category>>("api/category");
            _questionModel = new Contract.Models.Question {CategoryId = CategoryId};

            _selectedCategory = _categoryModels.FirstOrDefault(c => c.Id == _questionModel.CategoryId);
        }
        catch
        {
            UriHelper.NavigateTo("/");
        }
    }

    private async Task Add()
    {
        try
        {
            await Http.AuthorizedPostJsonAsync<Guid>("api/question", _questionModel);
            UriHelper.NavigateTo($"/category/{_questionModel.CategoryId}/questions");
        }
        catch
        {
            UriHelper.NavigateTo("/");
        }

    }

    private void SetSelectedCategory(Contract.Models.Category category)
    {
        _selectedCategory = category;
        _questionModel.CategoryId = category.Id;

    }
}